import Taro from "@tarojs/taro";
import {
  serviecUrl,
  jdAuthorizationUrl,
  alipayLifeAuthorizationUrl
} from "../config/index";
import {
  setCookie,
  getCookie,
  hasToken,
  delCookie,
  delSessionItem
} from "./save-token";
import {
  fetchjdaccredit,
  fetchaliaccredit,
  fetchappminiaccredit,
  fetchIsbindPhone,
  fetchTokenisUseless
} from "../api/accredit";
import getChannel from "./channel";
import { set as setBlobalData } from "../global_data";

const filterUrlArr =
  getChannel() === "JDBT"
    ? ["/pages/home/index", "/pages/user/index", "/"]
    : ["#/pages/home/index", "#/pages/user/index", "/"];

// ‰∏çÂêåÊ∏†ÈÅìËµ∞‰∏çÂêåÁöÑÊéàÊùÉÊµÅÁ®ã
export function channelAccredit(type) {
  return new Promise(resolve => {
    switch (getChannel()) {
      case "JDBT":
        jdAccredit();
        break;
      case "ALIPAY_LIFE":
        getUsersUID();
        break;
      case "APLIPAY_MINI_PROGRAM":
        if (type == "Failure") {
          Taro.showToast({
            title: "ÊÇ®ÁöÑÁôªÂΩïÂ∑≤Â§±Êïà,ÈúÄË¶ÅÈáçÊñ∞ÊéàÊùÉÁôªÂΩï",
            icon: "fail"
          });
          delCookie("openid");
          delCookie("Token");
          delSessionItem("userInfo");
          delCookie("loginStatus");
        } else {
          alipayAppauth().then(() => {
            resolve();
          });
        }
        break;
      default:
        break;
    }
  });
}

// Ëé∑Âèñurl‰∏≠ÁöÑÂèÇÊï∞
export function getParams(url, key) {
  // var urlArray = url.split("?");
  //var url = urlArray[1].replace(/^\?/, '').split('&');
  var url = url
    .substr(url.indexOf("?") + 1)
    .replace(/^\?/, "")
    .split("&");
  var paramsObj = {};
  for (var i = 0, iLen = url.length; i < iLen; i++) {
    var param = url[i].split("=");
    paramsObj[param[0]] = param[1];
  }
  if (key) {
    return paramsObj[key] || "";
  }
  return paramsObj;
}

//Ëé∑Âèñurl?ÂêéÈù¢ÂèÇÊï∞
export function GetRequest(url, name) {
  let reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
  let r = url.match(reg); //search,Êü•ËØ¢ÔºüÂêéÈù¢ÁöÑÂèÇÊï∞ÔºåÂπ∂ÂåπÈÖçÊ≠£Âàô

  if (r != null) return unescape(r[2]);
  return null;
}

export function aliGetrequest(name) {
  let index = window.location.hash.substr(1).indexOf("?");
  if (index) {
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
    var r = window.location.hash
      .substr(1)
      .substr(index + 1)
      .match(reg);
    if (r != null) return r[2];
    return null;
  }
}

export function applicationAccredit() {
  // ‰∏çÂêåÈ°µÈù¢Ëµ∞‰∏çÂêåÁöÑÊéàÊùÉÊìç‰Ωú
  switch (getChannel()) {
    case "JDBT": // ‰∫¨‰∏úÁôΩÊù°‰ø°Áî®
      navToJDAccredit().then(
        () => {
          jdAccredit();
        },
        () => {}
      );
      break;
    case "ALIPAY_LIFE": // ÊîØ‰ªòÂÆùÁîüÊ¥ªÂè∑
      handleAuth_code().then(
        () => {
          getUsersUID();
        },
        () => {}
      );
      break;

    default:
      break;
  }
}

// ÊéàÊùÉ  ÊâãÊú∫Âè∑ÁªëÂÆöÊµÅÁ®ãÂ§ÑÁêÜ
export function hasUserState() {
  return new Promise((resolve, reject) => {
    // Á¨¨‰∏ÄÊ≠• Âà§Êñ≠cookieÊòØÊã•Êúâopenid accessToken  Êó† ====> ÂâçÂæÄÊùÉÁõäÊéàÊùÉ  Êúâ=======> Âà§Êñ≠cookie ÊòØÂê¶Êã•ÊúâToken
    if (!hasToken("openid")) {
      setCookie("loginStatus", false);
      channelAccredit().then(() => {
        reject(true);
      });
      // resolve(false)
    } else {
      if (getChannel() === "JDBT") {
        // ‰∫¨‰∏ú
        // Á¨¨‰∏ÄÊ≠• Âà§Êñ≠cookieÊòØÂê¶Êã•ÊúâToken Êó† ====> ÂâçÂæÄÊâãÊú∫Âè∑ÁªëÂÆö  Êúâ=======> Â∑≤ÁªëÂÆö
        if (
          !hasToken("Token") &&
          hasToken("accessToken") &&
          hasToken("openid")
        ) {
          Taro.navigateTo({
            url: "/pages/user/bindUserMobileLogin/index"
          });
          resolve(false);
        } else {
          resolve(true);
        }
      } else if (getChannel() === "ALIPAY_LIFE") {
        if (!hasToken("Token") && hasToken("authCode") && hasToken("openid")) {
          Taro.navigateTo({
            url: "/pages/user/bindUserMobileLogin/index"
          });
          resolve(false);
        } else {
          resolve(true);
        }
      } else {
        getIsBindPhone().then(
          () => {
            if (!hasToken("Token")) {
              channelAccredit().then(() => {
                reject(true);
              });
            } else {
              fetchTokenisUseless().then(res => {
                if (res.code === 200 && res.data) {
                  resolve(true);
                }
              });
            }
          },
          () => {
            Taro.navigateTo({
              url: "/pages/user/bindUserMobileLogin/index"
            });
            resolve(false);
          }
        );
      }
    }
  });
}

// <==========================ÊàëÊòØÂèØÁà±ÁöÑÂàÜÂâ≤Á∫øüòä==================================>
/**
 * ‰∫¨‰∏úÊéàÊùÉÊµÅÁ®ã
 */

// Â§ÑÁêÜaccessToken
export function navToJDAccredit() {
  return new Promise((resolve, reject) => {
    let accessToken = GetRequest("accessToken");
    accessToken && setCookie("accessToken", accessToken);
    if (accessToken && !hasToken("openid") && !hasToken("Token")) {
      // Â∫îÁî®Á¨¨‰∏ÄÊ¨°Âä†ËΩΩ
      resolve();
    } else {
      reject();
    }
  });
}

// ‰∫¨‰∏úÊùÉÁõäÊéàÊùÉ
export function jdAccredit() {
  // ÊòØÂê¶Êã•ÊúâaccessToken Â¶ÇÊûúcookieÊ≤°Êúâ ÂàôÈúÄË¶ÅÂâçÂæÄ‰∏≠Èó¥È°µÈáçÊñ∞ÁôªÂΩï
  if (hasToken("accessToken")) {
    let accessToken = getCookie("accessToken");
    fetchjdaccredit({ accessToken }).then(res => {
      if (res.code === 200) {
        if (res.data.token) {
          setCookie("Token", res.data.token);
        }
        // openid
        if (res.data.openid) {
          setCookie("openid", res.data.openid);
        } else if (res.data.jdUsers && res.data.jdUsers.openid) {
          setCookie("openid", res.data.jdUsers.openid);
        }
      } else {
        Taro.showToast({
          title: "‰∫¨‰∏úÊéàÊùÉÂ§±Êïà,ÂºÄÂßãÈáçÊñ∞ÊéàÊùÉ",
          icon: "loading"
        }).then(() => {
          setTimeout(() => {
            const projectUrl = window.location.pathname;
            let callBackUrl = "";
            if (filterUrlArr.includes(projectUrl)) {
              callBackUrl = serviecUrl + projectUrl;
            } else {
              callBackUrl = window.location.href;
            }
            window.location.href = `${jdAuthorizationUrl}&callBack=${encodeURIComponent(
              callBackUrl
            )}`;
          }, 1000);
        });
      }
    });
  } else {
    Taro.showToast({
      title: "ÂºÄÂßã‰∫¨‰∏úÊùÉÁõäÊéàÊùÉ",
      icon: "loading"
    }).then(() => {
      setTimeout(() => {
        const projectUrl = window.location.pathname;
        let callBackUrl = "";
        if (filterUrlArr.includes(projectUrl)) {
          callBackUrl = serviecUrl + projectUrl;
        } else {
          callBackUrl = window.location.href;
        }
        window.location.href = `${jdAuthorizationUrl}&callBack=${encodeURIComponent(
          callBackUrl
        )}`;
      }, 1000);
    });
  }
}

// <==========================ÊàëÊòØÂèØÁà±ÁöÑÂàÜÂâ≤Á∫øüòä==================================>

/**
 * ÊîØ‰ªòÂÆùÊéàÊùÉÊµÅÁ®ã
 * scope: auth_user auth_base
 * redirect_uri: ÂõûË∞ÉÈ°µÈù¢
 */

//  È™åËØÅ url ÊòØÂê¶Êê∫Â∏¶ auth_code
export function handleAuth_code() {
  return new Promise((resolve, reject) => {
    let authCode = aliGetrequest("auth_code");
    authCode && setCookie("authCode", authCode);
    if (authCode && !hasToken("openid") && !hasToken("Token")) {
      resolve();
    } else {
      reject();
    }
  });
}

export function getUsersUID() {
  if (hasToken("authCode")) {
    let authCode = getCookie("authCode");
    fetchaliaccredit({ authCode, channel: getChannel() }).then(res => {
      if (res.code === 200) {
        if (res.data.token) {
          setCookie("Token", res.data.token);
        }
        // openid
        if (res.data.openid) {
          setCookie("openid", res.data.openid);
        } else if (res.data.alipayUsers && res.data.alipayUsers.openid) {
          setCookie("openid", res.data.alipayUsers.openid);
        }
      } else {
        Taro.showToast({
          title: "Áî®Êà∑ÊéàÊùÉÂ§±Êïà,ÂºÄÂßãÈáçÊñ∞ÊéàÊùÉ",
          icon: "loading"
        }).then(() => {
          setTimeout(() => {
            const projectUrl = window.location.hash.split("?")[0];
            let callBackUrl = "";
            if (filterUrlArr.includes(projectUrl)) {
              callBackUrl = serviecUrl + "/" + projectUrl;
            } else {
              callBackUrl = window.location.href;
            }
            // return
            window.location.href = `${alipayLifeAuthorizationUrl}&redirect_uri=${encodeURIComponent(
              callBackUrl
            )}`;
          }, 1000);
        });
      }
    });
  } else {
    Taro.showToast({
      title: "ÂºÄÂßãÁî®Êà∑‰ø°ÊÅØÊéàÊùÉ",
      icon: "loading"
    }).then(() => {
      setTimeout(() => {
        const projectUrl = window.location.hash.split("?")[0];
        let callBackUrl = "";
        if (filterUrlArr.includes(projectUrl)) {
          callBackUrl = serviecUrl + "/" + projectUrl;
        } else {
          callBackUrl = window.location.href;
        }
        // return
        window.location.href = `${alipayLifeAuthorizationUrl}&redirect_uri=${encodeURIComponent(
          callBackUrl
        )}`;
      }, 1000);
    });
  }
}

// <==========================ÊàëÊòØÂèØÁà±ÁöÑÂàÜÂâ≤Á∫øüòä==================================>
/**
 * ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÊéàÊùÉÊµÅÁ®ã
 * 1 Ë∞ÉÁî®Â∞èÁ®ãÂ∫èÁôªÈôÜ api  Taro.login  Ëé∑ÂèñÁôªÈôÜÂá≠ËØÅ code()
 * 2 Ë∞ÉÁî®Â∞èÁ®ãÂ∫è Taro.checkSession  Ê£ÄÈ™åÁôªÈôÜÊé•Âè£ÁöÑÁöÑÊó∂ÊïàÊÄß  ÂÖ∑‰ΩìÊó∂Èó¥Áî±ÂæÆ‰ø°Á´ØÂÆûÁé∞Âà§Êñ≠ Â§±Êïà ==> ÈáçÊñ∞ÁôªÈôÜ
 * 3 ÈÄöËøáÂá≠ËØÅË∞ÉÁî®ÊúçÂä°Á´ØÂêéÂè∞Êé•Âè£ Êç¢Âèñ openid  token
 * 4 ÂÖºÂÆπÂ§ÑÁêÜÁî®Êà∑ÊãíÁªùÊéàÊùÉÁöÑÊÉÖÂÜµ

 */

// Â∞èÁ®ãÂ∫èÊ£ÄÈ™åÁôªÈôÜÁä∂ÊÄÅ
export function appMiniCheckSession() {
  Taro.checkSession().then(
    () => {
      // ÊéàÊùÉÁä∂ÊÄÅÂú®Á∫ø ===> Êó†ÈúÄÈáçÂ§çÁôªÈôÜ
    },
    () => {
      // ÊéàÊùÉÁä∂ÊÄÅÂ§±Êïà ===> ÂâçÂæÄÁôªÈôÜ
      appMiniLogin();
    }
  );
}

// Â∞èÁ®ãÂ∫èÁôªÈôÜ
export function appMiniLogin() {
  Taro.login().then(
    res => {
      res.code && getAppMiniOpeId(res.code);
    },
    res => {}
  );
}

// Ë∑üÊúçÂä°Á´ØÊç¢Âèñopenid
export function getAppMiniOpeId(code) {
  fetchappminiaccredit({ code }).then(res => {
    if (res.code === 200) {
      if (res.data.token) {
        setCookie("Token", res.data.token);
      }
      // openid
      if (res.data.openid) {
        setCookie("openid", res.data.openid);
      }
    }
  });
}

export function appMiniGetSetting() {
  Taro.getSetting().then(
    res => {},
    res => {}
  );
}
// <==========================ÊàëÊòØÂèØÁà±ÁöÑÂàÜÂâ≤Á∫øüòä==================================>
// ÊîØ‰ªòÂÆùÂ∞èÁ®ãÂ∫èÁôªÈôÜÊéàÊùÉÊéàÊùÉ
export function alipayAppauth() {
  return new Promise((resolve, reject) => {
    my.getAuthCode({
      scopes: ["auth_user"],
      success: res => {
        Taro.showLoading({ title: "ÂºÄÂßãÊéàÊùÉ" });
        if (res.authCode) {
          getalipayAppMiniOpeId(res.authCode).then(() => {
            Taro.hideLoading();
            resolve(res.authCode);
          });
        }
      },
      fail: res => {
        Taro.showToast({ title: "ÊéàÊùÉÂ§±Ë¥•" });
        Taro.hideLoading();
        reject();
      }
    });
  });
}

export function getalipayAppMiniOpeId(authCode) {
  return new Promise((resolve, reject) => {
    fetchaliaccredit({ authCode, channel: getChannel() }).then(res => {
      if (res.code === 200) {
        if (res.data.token) {
          setCookie("Token", res.data.token);
        }
        // openid
        if (res.data.openid) {
          setCookie("openid", res.data.openid);
          setBlobalData("openid", res.data.openid); // hack ÊîØ‰ªòÂÆùÂ∞èÁ®ãÂ∫èÁéØÂ¢É‰∏ã openid Âèñ‰∏çÂà∞ÈóÆÈ¢ò
        } else if (res.data.alipayUsers && res.data.alipayUsers.openid) {
          setCookie("openid", res.data.alipayUsers.openid);
          setBlobalData("openid", res.data.alipayUsers.openid); // hack ÊîØ‰ªòÂÆùÂ∞èÁ®ãÂ∫èÁéØÂ¢É‰∏ã openid Âèñ‰∏çÂà∞ÈóÆÈ¢ò
        }
        resolve();
      } else {
        Taro.showToast({ title: "ÊéàÊùÉÂ§±Ë¥•,ËØ∑Á®çÂêéÂÜçËØï" });
        reject();
      }
    });
  });
}

// Êü•ËØ¢Áî®Êà∑ÊòØÂê¶ÁªëÂÆöÊâãÊú∫Âè∑
export function getIsBindPhone() {
  return new Promise((resolve, reject) => {
    let params = {
      openid: getCookie("openid"),
      channel: getChannel()
    };
    fetchIsbindPhone({ ...params }).then(res => {
      if (res.code == 200) {
        if (res.data) {
          resolve();
        } else {
          reject();
        }
      }
    });
  });
}
